@page "/Category/Create"
@page "/Category/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _NavigationManager
@attribute [Authorize]
<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

	<div class="col-10">
		@if(IsLoading)
		{
			<div class="text-center">
				<img src="/Images/ajax-loader.gif">
			</div>
		}
		else{
		<EditForm Model="Category" OnValidSubmit="Upsertcategory">
			<DataAnnotationsValidator/>
			@*<ValidationSummary/>*@
			<div class="form-group">
				<label>Name</label>
				<InputText @bind-Value="Category.Name" class="form-control"></InputText>
				<ValidationMessage For="()=>Category.Name"></ValidationMessage>
			</div>
			<div class="form-group py-2">
				<button class="btn btn-primary">@Title</button>
				<NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
			</div>
		</EditForm>
		}
	</div>
</div>

@code {

	[Parameter]
	public int Id { get; set; }

	private CategoryDTO Category { get; set; } = new CategoryDTO();
	private string Title { get; set; } = "Create";
	public bool IsLoading { get; set; } 
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (Id == 0)
			{
				// Create Request
				IsLoading = false;
			}
			else
			{
				//Update
				Title = "Update";
				await LoadCategory();
			}
		}
	}

	private async Task LoadCategory()
	{
		IsLoading = true;
		StateHasChanged();
		Category = await _categoryRepository.Get(Id);
		IsLoading = false;
		StateHasChanged();
	}

	private async Task Upsertcategory()
	{
		if(Category.Id == 0)
		{
			// Craete
			await _categoryRepository.Create(Category);	
		}
		else
		{
			//Update
			await _categoryRepository.Update(Category);
		}
		_NavigationManager.NavigateTo("Category");

		
	}


}
