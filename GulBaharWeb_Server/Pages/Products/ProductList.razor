@page "/Product"
@inject IProductRepository _productRepository
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRunTime
@inject NavigationManager _navigationManager

<_DeleteConfirmation IsParentComponentProcessing ="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
	<div class="col-6">
		<h4 class="card-title text-primary">Product List</h4>
	</div>
	<div class="col-4 offset-2">
		<a href="Product/Create" class="btn btn-primary form-control">Add new Product</a>
	</div>
	<div class="col-12">
		@if (Products.Any())
		{
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>Name</th>
						<th>Shop Favorites</th>
						<th>Customer Favorites</th>
						<th>Category</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach(var prod in Products)
					{
						<tr>
							<td>@prod.Name
							</td>
							<th>
								<input type ="checkbox" disabled checked="@prod.ShopFavorites">
							</th>
							<th>
								<input type="checkbox" disabled checked="@prod.CustomerFavorites">
							</th>
							<th>
								@prod.Category.Name
							</th>
							<td>
							<NavLink href="@($"Product/edit/{prod.Id}")" class="btn-primary btn">Edit</NavLink>
							<NavLink href="@($"Product/Price/{prod.Id}")" class="btn-success btn">Price</NavLink>
							<button class="btn btn-danger" @onclick="()=>HanldeDelete(prod.Id)">Delete</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			if (IsLoading)
			{
				// loading gif
				<div class="text-center">
					<img src="/Images/ajax-loader.gif">
					</div>
			}
			else
			{
				// no records
				<p>No Records Found.</p>
			}
		}
	</div>
</div>

@code {
	private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
	public bool IsLoading { get; set; }
	private int DeleteProductId { get; set; } = 0;

	[CascadingParameter]
	public Task<AuthenticationState> authenticationState{ get; set; }
	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationState;
		if (!authState.User.Identity.IsAuthenticated)
		{
			var uri = new Uri(_navigationManager.Uri);
			_navigationManager.NavigateTo($"identity/account/login?returnUrl={uri.LocalPath}",forceLoad:true);
		}
		else
		{
			if(!authState.User.IsInRole(GulBahar_Common_Func_Lib.SD.Role_Admin)){
				_navigationManager.NavigateTo("/ErrorPage");
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			await LoadProducts(); 
		}
	}

	private async Task LoadProducts()
	{
		IsLoading = true;
		StateHasChanged();
		Products = await _productRepository.GetAll();
		IsLoading = false;
		StateHasChanged();
	}

	private void HanldeDelete(int id)
	{
		DeleteProductId = id;
		_jsRunTime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}

	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		IsLoading = true;
		if (isConfirmed && DeleteProductId!= 0)
		{
			//Delete
			ProductDTO product = await _productRepository.Get(DeleteProductId);
			if (!product.ImageUrl.Contains("default.png"))
			{
				_fileUpload.DeleteFile(product.ImageUrl);
			}
			await _productRepository.Delete(DeleteProductId);
			await _jsRunTime.ToasterSuccess("Product Deleted successfully");
			await LoadProducts();
			await _jsRunTime.InvokeVoidAsync("HideDeleteConfirmationModal");
		}
		IsLoading = false;
	}
	
} 