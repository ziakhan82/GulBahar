@page "/Product/Create"
@page "/Product/edit/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _NavigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]
<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

	<div class="col-md-10">
		@if(IsLoading)
		{
			<div class="text-center">
				<img src="/Images/ajax-loader.gif">
			</div>		
		}
		else
		{
			<EditForm Model="Product" OnValidSubmit="UpsertProduct">
			<DataAnnotationsValidator/>
			@*<ValidationSummary/>*@
			<div class="form-group">
				<label>Name</label>
					<InputText @bind-Value="Product.Name" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Name"></ValidationMessage>
			</div>
				<div class="form-group">
					<label>Color</label>
					<InputText @bind-Value="Product.Color" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Color"></ValidationMessage>
				</div>
				<div class="form-group">
					<label>Description</label>
					
					<SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor>
					<ValidationMessage For="()=>Product.Description"></ValidationMessage>
				</div>

				<div class="row pt-3">
					<div class="form-group col-6">
					<div class="form-check">
						<InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
						<label class="form-check-label">Is Shop favorites </label>
					</div>
					</div>
					<div class="form-group col-6">
						<div class="form-check">
							<InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
							<label class="form-check-label">Is Customer favorites </label>
						</div>
					</div>
					<div class="form-group col-6">
						<label>Category</label>
							<InputSelect @bind-Value="Product.CategoryId" class="form-select">
								<option value="0" disabled="disabled" selected>-- Select Category</option>
							@foreach(var cat in Categories)
							{
								<option value="@cat.Id">@cat.Name</option>
							}
						</InputSelect>
						<ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
							<label class="form-check-label">Is Shop favorites </label>
					</div>
					<div class="form-group pt-4 col-6">
						<InputFile OnChange="HandleImageUpload"></InputFile>
						</div>
				</div>
			
				
			<div class="form-group py-2">
				<button class="btn btn-primary">@Title</button>
				<NavLink href="Product" class="btn btn-secondary">Back to Index</NavLink>
			</div>
		</EditForm>
	}
</div>
<div class="col-md-2">
	<img src="@Product.ImageUrl" class="w-100" />
</div>
</div>


@code {

	[Parameter]
	public int Id { get; set;}
	private ProductDTO Product { get; set; } = new()
		{
			ImageUrl="/Images/default.png"
		};
	private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
	private string Title { get; set; } = "Create";
	public string OldImageUrl {get; set;}
	public bool IsLoading { get; set; } 
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadProduct();
		}
	}

	private async Task LoadProduct()
	{
		IsLoading = true;
		StateHasChanged();
		Categories = await _categoryRepository.GetAll();
		if (Id!=0)
		{
			//Update
			Title = "Update";
			Product = await _productRepository.Get(Id);
			OldImageUrl = Product.ImageUrl;
		}  	
		IsLoading = false;
		StateHasChanged();
	}

	private async Task UpsertProduct()
	{
		if (Product.Id==0)
		{
			// Craete
			await _productRepository.Create(Product);
			await _jsRuntime.ToasterSuccess("Product created successfully.");
		}
		else
		{
			//Update
			if (OldImageUrl != Product.ImageUrl)
			{
				_fileUpload.DeleteFile(OldImageUrl);
			}
			await _productRepository.Update(Product);
			await _jsRuntime.ToasterSuccess("Product updated successfully.");
		}
		_NavigationManager.NavigateTo("Product");

	
	}

	private async Task HandleImageUpload(InputFileChangeEventArgs e)
	{
		IsLoading = true;
		try
		{
			if (e.GetMultipleFiles().Count > 0)
			{
				foreach (var file in e.GetMultipleFiles())
				{
					FileInfo fileInfo = new FileInfo(file.Name);
					if (fileInfo.Extension.ToLower() == ".jpg" ||
					 fileInfo.Extension.ToLower() == ".png" ||
					 fileInfo.Extension.ToLower() == ".jpeg")
					{
						Product.ImageUrl = await _fileUpload.UploadFile(file);
					}
					else
					{
						await _jsRuntime.ToasterError("Please select .jpg/.jpeg/.png file only");
						return;
					}
				}
			}
			IsLoading = false;
		}
		catch(Exception ex)
		{
			await _jsRuntime.ToasterError(ex.Message);
		}
	}


}
