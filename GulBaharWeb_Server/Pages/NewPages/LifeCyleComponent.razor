@page "/NewPages/LifeCyleComponent"
@using System.Threading
<h3>LifeCyleComponent</h3>
<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br /> @count <button @onclick=StartCountdown>Start Countdown</button>
<div class="border">
    <_LifeCycleChildComponent CountValue="@currentCount"></_LifeCycleChildComponent>
</div>
<hr/>
@foreach(var item in EventType)
{
    @item
    <hr/>
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("On Intitialized is called");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");

    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback(object state)
    {
        if(count > 0)
        {
            count--;
            InvokeAsync(StateHasChanged);
        }
    }




}
